import os
import requests
from dotenv import load_dotenv
import streamlit as st
import time

class CoffeeMachineChatbot:
    def __init__(self):
        """
        Initialize chatbot with Groq API for coffee machine troubleshooting.
        """
        # Load environment variables
        load_dotenv()
        
        # Retrieve API key from environment
        self.api_key = os.getenv('GROQ_API_KEY')
        
        # Groq API endpoint
        self.url = 'https://api.groq.com/openai/v1/chat/completions'
    
    def generate_response(self, situation):
        """
        Generate troubleshooting response via Groq API
        
        Args:
            situation (str): User's input situation
        
        Returns:
            str: Response generated by the AI
        """
        # Prepare API request headers
        headers = {
            'Authorization': f'Bearer {self.api_key}',
            'Content-Type': 'application/json'
        }
        
        # Construct payload for API request
        payload = {
            'model': 'llama-3.2-90b-vision-preview',  # Groq's Llama 3 model
            'messages': [
                {"role": "system", "content": "You are a coffee machine troubleshooting assistant."},
                {"role": "user", "content": situation}
            ]
        }
        
        # Send the request to the Groq API
        response = requests.post(self.url, headers=headers, json=payload)
        
        if response.status_code == 200:
            # Extract and return the response
            return response.json()['choices'][0]['message']['content']
        else:
            return f"Error {response.status_code}: {response.json().get('error', 'Unknown error')}"

# Initialize the chatbot
chatbot = CoffeeMachineChatbot()

# Streamlit app setup
st.title("Coffee Machine Troubleshooting Chatbot")

# Initialize the conversation history if not already set
if 'history' not in st.session_state:
    st.session_state.history = []

# Display the initial prompt for the first message
if not st.session_state.history:
    st.text("Describe the coffee machine issue:")

# Get the user input for the chatbot
user_input = st.text_input("Your Issue:", "", key="user_input_field")

# Handle conversation and display the messages
if user_input:
    # Get the response from the chatbot
    response = chatbot.generate_response(user_input)
    
    # Add user input and AI response to conversation history
    timestamp = time.strftime('%Y-%m-%d %H:%M:%S')  # Current timestamp
    st.session_state.history.append((timestamp, f"**User**: {user_input}"))
    st.session_state.history.append((timestamp, f"**AI**: {response}"))
    
    # Clear input field after submitting
    st.text_input("Your Issue:", value="", key="user_input_field_clear")

# Display conversation history with timestamps
for timestamp, message in st.session_state.history:
    if "User" in message:
        st.markdown(f"<div style='background-color:#DCF8C6;padding:8px;border-radius:10px;margin-bottom:5px;max-width:80%;'>{message} <span style='font-size:10px;color:#888;'>{timestamp}</span></div>", unsafe_allow_html=True)
    else:
        st.markdown(f"<div style='background-color:#E8E8E8;padding:8px;border-radius:10px;margin-bottom:5px;max-width:80%;'>{message} <span style='font-size:10px;color:#888;'>{timestamp}</span></div>", unsafe_allow_html=True)
